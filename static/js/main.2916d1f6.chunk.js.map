{"version":3,"sources":["MainPage.js","ErrorPage.js","TypePage.js","MainSettings.js","OneTimeAdditional.js","FullView.js","Snippet.js","App.js","serviceWorker.js","index.js"],"names":["MainPage","history","useHistory","activePanel","id","stretched","action","onClick","push","header","className","weight","ErrorPage","TypePage","mode","window","location","href","fill","MainSettings","type","OneTimeAdditional","FullView","Snippet","App","basename","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2bA0BeA,MAff,WACI,IAAMC,EAAUC,cAChB,OACI,kBAAC,IAAD,CAAMC,YAAY,QACd,kBAAC,IAAD,CAAOC,GAAG,QACN,kBAAC,IAAD,uFACA,kBAAC,IAAD,CACIC,WAAW,EACXC,OAAQ,kBAAC,IAAD,CAAQC,QAAS,WAAON,EAAQO,KAAK,WAArC,uEACRC,OAAQ,kBAAC,IAAD,CAAMC,UAAW,mBAAoBC,OAAQ,WAA7C,+GAA+E,6BAA/E,mHCZbC,MANf,WACI,OACI,qC,2DCoDOC,MA5Cf,WACI,OACI,kBAAC,IAAD,CAAMV,YAAY,QACd,kBAAC,IAAD,CAAOC,GAAG,QACN,kBAAC,IAAD,0DACA,kBAAC,IAAD,CAAOM,UAAW,gBACd,kBAAC,IAAD,CAAMA,UAAW,YAAaI,KAAM,OAAQP,QAAS,WACjDQ,OAAOC,SAASC,KAAO,aAEvB,yBAAKP,UAAW,qBACZ,yBAAKA,UAAW,0BACZ,kBAAC,IAAD,CAAqBQ,KAAM,YAC3B,yBAAKR,UAAW,mBACZ,0BAAMA,UAAW,cAAjB,uEACA,0BAAMA,UAAW,iBAAjB,+JAGR,yBAAKA,UAAW,cACZ,kBAAC,IAAD,CAAoBQ,KAAM,eAItC,kBAAC,IAAD,CAAMR,UAAW,YAAaI,KAAM,OAAQP,QAAS,WACjDQ,OAAOC,SAASC,KAAO,gBAEvB,yBAAKP,UAAW,qBACZ,yBAAKA,UAAW,0BACZ,kBAAC,IAAD,CAAuBQ,KAAM,YAC7B,yBAAKR,UAAW,mBACZ,0BAAMA,UAAW,cAAjB,yFACA,0BAAMA,UAAW,iBAAjB,+JAGR,yBAAKA,UAAW,cACZ,kBAAC,IAAD,CAAoBQ,KAAM,mBCtC3CC,MANf,SAAsBC,GAClB,OAAO,kBACH,6BAAMA,KCICC,MANf,WACI,OACI,4CCIOC,MANf,WACI,OACI,0CCIOC,MANf,WACI,OACI,yCC0BOC,MAjBf,WACI,OACI,kBAAC,IAAD,CAAeC,SAAU,YACrB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,UAAW5B,IACnC,kBAAC,IAAD,CAAO0B,OAAK,EAACC,KAAM,QAASC,UAAWf,IACvC,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAM,WAAYC,UAAWT,EAAa,aACvD,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAM,cAAeC,UAAWT,EAAa,gBAC1D,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAM,cAAeC,UAAWP,IAC7C,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAM,WAAYC,UAAWL,IAC1C,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAM,QAASC,UAAWN,IACvC,kBAAC,IAAD,CAAOK,KAAM,IAAKC,UAAWhB,OCZzBiB,QACW,cAA7Bd,OAAOC,SAASc,UAEe,UAA7Bf,OAAOC,SAASc,UAEhBf,OAAOC,SAASc,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2916d1f6.chunk.js","sourcesContent":["import View from \"@vkontakte/vkui/dist/components/View/View\";\nimport Panel from \"@vkontakte/vkui/dist/components/Panel/Panel\";\nimport PanelHeader from \"@vkontakte/vkui/dist/components/PanelHeader/PanelHeader\";\nimport Placeholder from \"@vkontakte/vkui/dist/components/Placeholder/Placeholder\";\nimport Button from \"@vkontakte/vkui/dist/components/Button/Button\";\nimport Text from \"@vkontakte/vkui/dist/components/Typography/Text/Text\";\nimport React from \"react\";\nimport \"./MainPage.css\"\nimport { useHistory } from \"react-router-dom\";\n\n\nfunction MainPage() {\n    const history = useHistory()\n    return (\n        <View activePanel=\"main\">\n            <Panel id=\"main\">\n                <PanelHeader>Пожертвования</PanelHeader>\n                <Placeholder\n                    stretched={true}\n                    action={<Button onClick={() => {history.push(\"/type\")}}>Создать сбор</Button>}\n                    header={<Text className={\"placeholder-text\"} weight={\"regular\"}>У вас пока нет сборов. <br/> Начните доброе дело.</Text>} />\n            </Panel>\n        </View>\n    );\n}\n\nexport default MainPage;","import React from \"react\";\n\nfunction ErrorPage() {\n    return (\n        <div>404</div>\n    );\n}\n\nexport default ErrorPage;","import React from \"react\";\nimport {Card} from \"@vkontakte/vkui\";\nimport Panel from \"@vkontakte/vkui/dist/components/Panel/Panel\";\nimport PanelHeader from \"@vkontakte/vkui/dist/components/PanelHeader/PanelHeader\";\nimport Placeholder from \"@vkontakte/vkui/dist/components/Placeholder/Placeholder\";\nimport Button from \"@vkontakte/vkui/dist/components/Button/Button\";\nimport Text from \"@vkontakte/vkui/dist/components/Typography/Text/Text\";\nimport View from \"@vkontakte/vkui/dist/components/View/View\";\nimport Group from \"@vkontakte/vkui/dist/components/Group/Group\";\nimport {Icon24ChevronRight, Icon28CalendarOutline, Icon28TargetOutline} from \"@vkontakte/icons\";\nimport \"./TypePage.css\"\n\nfunction TypePage() {\n    return (\n        <View activePanel=\"main\">\n            <Panel id=\"main\">\n                <PanelHeader>Тип сбора</PanelHeader>\n                <Group className={\"type-content\"}>\n                    <Card className={\"type-card\"} mode={\"tint\"} onClick={() => {\n                        window.location.href = \"/onetime\"\n                    }}>\n                        <div className={\"type-card-content\"}>\n                            <div className={\"type-card-content-left\"}>\n                                <Icon28TargetOutline fill={\"#3F8AE0\"}/>\n                                <div className={\"type-text-block\"}>\n                                    <span className={\"type-title\"}>Целевой сбор</span>\n                                    <span className={\"type-subtitle\"}>Когда есть определённая цель</span>\n                                </div>\n                            </div>\n                            <div className={\"type-arrow\"}>\n                                <Icon24ChevronRight fill={\"#B8C1CC\"}/>\n                            </div>\n                        </div>\n                    </Card>\n                    <Card className={\"type-card\"} mode={\"tint\"} onClick={() => {\n                        window.location.href = \"/repetitive\"\n                    }}>\n                        <div className={\"type-card-content\"}>\n                            <div className={\"type-card-content-left\"}>\n                                <Icon28CalendarOutline fill={\"#3F8AE0\"}/>\n                                <div className={\"type-text-block\"}>\n                                    <span className={\"type-title\"}>Регулярный сбор</span>\n                                    <span className={\"type-subtitle\"}>Если помощь нужна ежемесячно</span>\n                                </div>\n                            </div>\n                            <div className={\"type-arrow\"}>\n                                <Icon24ChevronRight fill={\"#B8C1CC\"}/>\n                            </div>\n                        </div>\n                    </Card>\n                </Group>\n            </Panel>\n        </View>\n    );\n}\n\nexport default TypePage;","import React from \"react\";\n\nfunction MainSettings(type) {\n    return () => (\n        <div>{type}</div>\n    );\n}\n\nexport default MainSettings;","import React from \"react\";\n\nfunction OneTimeAdditional() {\n    return (\n        <div>Additional</div>\n    );\n}\n\nexport default OneTimeAdditional;","import React from \"react\";\n\nfunction FullView() {\n    return (\n        <div>FullView</div>\n    );\n}\n\nexport default FullView;","import React from \"react\";\n\nfunction Snippet() {\n    return (\n        <div>Snippet</div>\n    );\n}\n\nexport default Snippet;","import React from 'react';\nimport './App.css';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport {Route, Switch} from \"react-router\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport MainPage from \"./MainPage\";\nimport ErrorPage from \"./ErrorPage\";\nimport TypePage from \"./TypePage\";\nimport MainSettings from \"./MainSettings\";\nimport OneTimeAdditional from \"./OneTimeAdditional\";\nimport FullView from \"./FullView\";\nimport Snippet from \"./Snippet\";\n\nfunction App() {\n    return (\n        <BrowserRouter basename={\"20200913\"}>\n            <Switch>\n                <Route exact path={\"/\"} component={MainPage}/>\n                <Route exact path={\"/type\"} component={TypePage}/>\n                <Route exact path={\"/onetime\"} component={MainSettings(\"onetime\")}/>\n                <Route exact path={\"/repetitive\"} component={MainSettings(\"repetitive\")}/>\n                <Route exact path={\"/additional\"} component={OneTimeAdditional}/>\n                <Route exact path={\"/snippet\"} component={Snippet}/>\n                <Route exact path={\"/full\"} component={FullView}/>\n                <Route path={\"/\"} component={ErrorPage}/>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}